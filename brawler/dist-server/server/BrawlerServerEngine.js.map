{"version":3,"sources":["../../src/server/BrawlerServerEngine.js"],"names":["game","BrawlerServerEngine","io","gameEngine","inputOptions","on","postStep","bind","addPlatform","x","y","width","i","dinoCount","f","addFighter","isDino","direction","f1","f2","action","Fighter","ACTIONS","indexOf","killDistance","dinoKillDistance","dx","Math","abs","position","dy","kills","progress","walkSpeed","removeObjectFromWorld","random","nextAction","floor","length","velocity","jumpSpeed","inputApplied","inputsApplied","playerId","fighters","world","queryObjects","instanceType","updateDinoAction","updateFighterAction","max","min","spaceWidth","fighterWidth","checkKills","socket","socketId","o","id","ServerEngine"],"mappings":"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","sourcesContent":["import { ServerEngine } from 'lance-gg';\nimport Fighter from '../common/Fighter';\n\nlet game = null;\n\nexport default class BrawlerServerEngine extends ServerEngine {\n\n    constructor(io, gameEngine, inputOptions) {\n        super(io, gameEngine, inputOptions);\n        game = gameEngine;\n        game.on('postStep', this.postStep.bind(this));\n    }\n\n    start() {\n        super.start();\n\n        // add floor\n        game.addPlatform({ x: 0, y: 0, width: 160 });\n\n        // add platforms\n        game.addPlatform({ x: 10, y: 25, width: 20 });\n        game.addPlatform({ x: 50, y: 35, width: 20 });\n        game.addPlatform({ x: 90, y: 35, width: 20 });\n        game.addPlatform({ x: 130, y: 25, width: 20 });\n\n        // add dinos\n        for (let i = 0; i < game.dinoCount; i++) {\n            let f = game.addFighter(0);\n            f.isDino = true;\n            f.direction = 1;\n        }\n    }\n\n    // check if fighter f1 killed f2\n    checkKills(f1, f2) {\n\n        // if f2 is already dying, exit\n        if (f1 === f2 || f2.action === Fighter.ACTIONS.indexOf('DIE'))\n            return;\n\n        // kill distance is different for fighters and dino's\n        let killDistance = null;\n        if (f1.action === Fighter.ACTIONS.indexOf('FIGHT'))\n            killDistance = game.killDistance;\n        else if (f1.isDino && !f2.isDino)\n            killDistance = game.dinoKillDistance;\n\n        if (killDistance === null) return;\n\n        let dx = Math.abs(f1.position.x - f2.position.x);\n        let dy = Math.abs(f1.position.y - f2.position.y);\n        if (dx <= killDistance && dy <= killDistance) {\n            f1.kills++;\n            f2.action = Fighter.ACTIONS.indexOf('DIE');\n            f2.progress = 100;\n        }\n    }\n\n    // handle Dino state change\n    updateDinoAction(f1) {\n\n        // Dinos keep walking\n        if (f1.action === Fighter.ACTIONS.indexOf('RUN'))\n            f1.position.x += game.walkSpeed * f1.direction;\n\n        // end-of-action handling\n        if (f1.progress === 0) {\n            f1.progress = 100;\n\n            // end of dying sequence\n            if (f1.action === Fighter.ACTIONS.indexOf('DIE')) {\n\n                // Dino fighters come back to life\n                if (f1.isDino) {\n                    let f = game.addFighter(0);\n                    f.isDino = true;\n                    f.direction = 1;\n                }\n                game.removeObjectFromWorld(f1);\n                return;\n            }\n\n            // choose direction and action\n            if (Math.random() > 0.7) f1.direction *= -1;\n            let nextAction = Math.floor(Fighter.ACTIONS.length * Math.random());\n            if (nextAction !== Fighter.ACTIONS.indexOf('DIE') && nextAction !== Fighter.ACTIONS.indexOf('FIGHT'))\n                f1.action = nextAction;\n            if (nextAction === Fighter.ACTIONS.indexOf('JUMP') && f1.velocity.length() === 0)\n                f1.velocity.y = game.jumpSpeed;\n        }\n    }\n\n    // handle fighter state change\n    updateFighterAction(f1) {\n\n        // if no input applied and we were running, switch to idle\n        let inputApplied = game.inputsApplied.indexOf(f1.playerId) >= 0;\n        if (!inputApplied && f1.action === Fighter.ACTIONS.indexOf('RUN'))\n            f1.action = Fighter.ACTIONS.indexOf('IDLE');\n\n        // end-of-action handling\n        if (f1.progress === 0) {\n            f1.progress = 100;\n\n            // end of dying sequence\n            if (f1.action === Fighter.ACTIONS.indexOf('DIE')) {\n                game.removeObjectFromWorld(f1);\n                return;\n            }\n\n            // if no input applied on this turn, switch to idle\n            if (!inputApplied)\n                f1.action = Fighter.ACTIONS.indexOf('IDLE');\n        }\n    }\n\n    // post-step state transitions\n    postStep() {\n\n        let fighters = game.world.queryObjects({ instanceType: Fighter });\n        for (let f1 of fighters) {\n\n            // updates to action\n            if (f1.isDino)\n                this.updateDinoAction(f1);\n            else\n                this.updateFighterAction(f1);\n\n            // check world bounds\n            f1.position.x = Math.max(f1.position.x, 0);\n            f1.position.x = Math.min(f1.position.x, game.spaceWidth - game.fighterWidth);\n\n            // check for kills\n            for (let f2 of fighters) this.checkKills(f1, f2);\n        }\n\n        // reset input list\n        game.inputsApplied = [];\n    }\n\n    onPlayerConnected(socket) {\n        super.onPlayerConnected(socket);\n        game.addFighter(socket.playerId);\n    }\n\n    onPlayerDisconnected(socketId, playerId) {\n        super.onPlayerDisconnected(socketId, playerId);\n        for (let o of game.world.queryObjects({ playerId }))\n            game.removeObjectFromWorld(o.id);\n    }\n}\n"],"file":"BrawlerServerEngine.js"}