{"version":3,"sources":["../../src/common/BrawlerGameEngine.js"],"names":["BrawlerGameEngine","options","Object","assign","dinoCount","spaceWidth","spaceHeight","fighterWidth","fighterHeight","jumpSpeed","walkSpeed","killDistance","dinoKillDistance","platformUnit","platformHeight","physicsEngine","SimplePhysicsEngine","gravity","TwoVector","collisions","type","autoResolve","gameEngine","inputsApplied","on","moveAll","bind","serializer","registerClass","Platform","Fighter","inputData","playerId","fighter","world","queryObject","instanceType","action","ACTIONS","indexOf","nextAction","input","position","x","direction","velocity","length","y","progress","refreshToPhysics","push","stepInfo","isReenact","fighters","queryObjects","f1","f","randomPosition","height","width","kills","addObjectToWorld","desc","p","isStatic","Math","random","GameEngine"],"mappings":"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","sourcesContent":["import { GameEngine, SimplePhysicsEngine, TwoVector } from 'lance-gg';\nimport Fighter from './Fighter';\nimport Platform from './Platform';\n\nexport default class BrawlerGameEngine extends GameEngine {\n\n    constructor(options) {\n        super(options);\n\n        // game variables\n        Object.assign(this, {\n            dinoCount: 2, spaceWidth: 160, spaceHeight: 90,\n            fighterWidth: 10, fighterHeight: 12, jumpSpeed: 1.5,\n            walkSpeed: 0.6, killDistance: 18, dinoKillDistance: 12,\n            platformUnit: 8, platformHeight: 5\n        });\n\n        this.physicsEngine = new SimplePhysicsEngine({\n            gravity: new TwoVector(0, -0.05),\n            collisions: { type: 'bruteForce', autoResolve: true },\n            gameEngine: this\n        });\n\n        this.inputsApplied = [];\n        this.on('preStep', this.moveAll.bind(this));\n    }\n\n    registerClasses(serializer) {\n        serializer.registerClass(Platform);\n        serializer.registerClass(Fighter);\n    }\n\n    processInput(inputData, playerId) {\n\n        super.processInput(inputData, playerId);\n\n        // handle keyboard presses:\n        // right, left - set direction and move fighter in that direction.\n        // up          - start jump sequence\n        // space       - start the fight sequence\n        let fighter = this.world.queryObject({ playerId: playerId, instanceType: Fighter });\n        if (fighter) {\n\n            // if fighter is dying or fighting, ignore actions\n            if (fighter.action === Fighter.ACTIONS.indexOf('DIE') ||\n                fighter.action === Fighter.ACTIONS.indexOf('FIGHT'))\n                return;\n\n            let nextAction = null;\n            if (inputData.input === 'right') {\n                fighter.position.x += this.walkSpeed;\n                fighter.direction = 1;\n                nextAction = Fighter.ACTIONS.indexOf('RUN');\n            } else if (inputData.input === 'left') {\n                fighter.position.x -= this.walkSpeed;\n                fighter.direction = -1;\n                nextAction = Fighter.ACTIONS.indexOf('RUN');\n            } else if (inputData.input === 'up') {\n                if (fighter.velocity.length() === 0) fighter.velocity.y = this.jumpSpeed;\n                nextAction = Fighter.ACTIONS.indexOf('JUMP');\n            } else if (inputData.input === 'space') {\n                nextAction = Fighter.ACTIONS.indexOf('FIGHT');\n            } else {\n                nextAction = Fighter.ACTIONS.indexOf('IDLE');\n            }\n            if (fighter.action !== nextAction)\n                fighter.progress = 100;\n            fighter.action = nextAction;\n            fighter.refreshToPhysics();\n\n            // remember that an input was applied on this turn\n            this.inputsApplied.push(playerId);\n        }\n    }\n\n    // logic for every game step\n    moveAll(stepInfo) {\n\n        if (stepInfo.isReenact)\n            return;\n\n        // advance animation progress for all fighters\n        let fighters = this.world.queryObjects({ instanceType: Fighter });\n\n        // update action progress\n        for (let f1 of fighters) {\n            f1.progress -= 3;\n            if (f1.progress < 0) f1.progress = 0;\n        }\n    }\n\n    // create fighter\n    addFighter(playerId) {\n        let f = new Fighter(this, null, { playerId, position: this.randomPosition() });\n        f.height = this.fighterHeight;\n        f.width = this.fighterWidth;\n        f.direction = 1;\n        f.progress = 0;\n        f.action = 0;\n        f.kills = 0;\n        this.addObjectToWorld(f);\n        return f;\n    }\n\n    // create a platform\n    addPlatform(desc) {\n        let p = new Platform(this, null, { playerId: 0, position: new TwoVector(desc.x, desc.y) });\n        p.width = desc.width;\n        p.height = this.platformHeight;\n        p.isStatic = 1;\n        this.addObjectToWorld(p);\n        return p;\n    }\n\n    // random position for new object\n    randomPosition() {\n        return new TwoVector(this.spaceWidth / 4 + Math.random() * this.spaceWidth/2, 70);\n    }\n}\n"],"file":"BrawlerGameEngine.js"}